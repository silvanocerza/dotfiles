if which systemctl &> /dev/null && systemctl -q is-active graphical.target && [[ ! $DISPLAY && $XDG_VTNR -eq 1 ]]; then
    exec startx
fi

# Checks if running on WSL, there's no DISPLAY env var on WSL
# so this is the only way to run tmux straight away
if grep -qE "(Microsoft|WSL|Windows)" /proc/version &> /dev/null; then
    if [ -z $TMUX ]; then
        which tmux &> /dev/null && tmux
    fi
fi

# Launches tmux if not already inside
[ $DISPLAY ] && [ -z $TMUX ] && which tmux &> /dev/null && tmux

# Better autocomplete
setopt magic_equal_subst

# Oh my zsh install path
export ZSH=~/.oh-my-zsh
export ZSH_CUSTOM=$ZSH/custom

# Theme
ZSH_THEME="oxide"

# History date format
HIST_STAMPS="mm/dd/yyyy"

# Plugins
plugins=(git ssh-agent)

# Zsh-z plugin if found
[ -d $ZSH_CUSTOM/plugins/zsh-z ] && plugins+=(zsh-z)

# Poetry autocompletion if found
[ -d $ZSH_CUSTOM/plugins/poetry ] && plugins+=(poetry)

# Notification plugin if found
[ -d $ZSH_CUSTOM/plugins/notify ] && plugins+=(notify)

# Sets Neovim has default editor
which nvim &> /dev/null && alias vim=nvim
export VISUAL=vim

# Exports all installed python version (via Pythonz) to
# the user PATH
if [[ -s $HOME/.pythonz/etc/bashrc ]]
then
    source $HOME/.pythonz/etc/bashrc
    PATH=$PATH:$(pythonz list -p | awk 'BEGIN {ORS=":"} /^ / {print $2"/bin"}')
fi

# I don't want rg to be a smartass
alias rg='rg -uu'

# Syntax highlighting on WSL Ubuntu
if [[ -f $HOME/.oh-my-zsh/custom/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh ]]; then
    plugins+=(fast-syntax-highlighting)
fi

# Loads homebrew
[ -d /opt/homebrew/bin/ ] && PATH=$PATH:/opt/homebrew/bin

[ -d /opt/homebrew/bin/ ] && FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

# Launches Oh my zsh
source $ZSH/oh-my-zsh.sh

# Syntax highlighting on Arch
if [[ -f /usr/share/zsh/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh ]]; then
    source /usr/share/zsh/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh
fi

which dircolors &> /dev/null && eval $( dircolors -b $HOME/.dircolors )

# fd must do what I want it to do and not be a smartass
alias fd="fd --hidden --no-ignore"

# fzf configs
[ -f /usr/share/fzf/key-bindings.zsh ] && source /usr/share/fzf/key-bindings.zsh
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Uses fd as default command showing also hidden files
FZF_DEFAULT_COMMAND="fd --hidden --no-ignore"

# ctrl+o opens Visual Studio Code on current folder or file
FZF_DEFAULT_OPTS="--bind='ctrl-o:execute-silent(code {})+abort'"

# If current selection is a text file shows its content,
# if it's a directory shows its content, the rest is ignored
FZF_CTRL_T_OPTS="--preview-window wrap --preview '
if [[ -f {} ]]; then
    file --mime {} | grep -q \"text\/.*;\" && bat --color \"always\" {} || (tput setaf 1; file --mime {})
elif [[ -d {} ]]; then
    ls -l --color=auto {}
else;
    tput setaf 1; echo YOU ARE NOT SUPPOSED TO SEE THIS!
fi'"

which fzf &> /dev/null && source <(fzf --zsh)

# Golang
which go &> /dev/null && export GOPATH=$HOME/go
which go &> /dev/null && PATH=$PATH:$(go env GOPATH)/bin

[ -f $HOME/.local/bin ] && PATH=$PATH:$HOME/.local/bin

# XAuthority
[ -f $HOME/.Xauthority ] && export XAUTHORITY=$HOME/.Xauthority

[ -d /usr/lib/jvm/java-8-openjdk ] && export JAVA_HOME=/usr/lib/jvm/java-8-openjdk

[ -d /opt/homebrew/opt/openjdk ] && export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"

# Binaries installed with Yarn
PATH=$PATH:$HOME/.yarn/bin

# Python virtualenvwrapper
which virtualenvwrapper_lazy.sh &> /dev/null && source virtualenvwrapper_lazy.sh

# Dart
PATH=$PATH:/usr/lib/dart/bin

# Flutter
PATH=$PATH:$HOME/flutter/bin

# Node Version Manager
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
# This is for OS X
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && . "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# Poetry
[ -s "$HOME/.poetry/env" ] && source "$HOME/.poetry/env"

# Rust
[ -s $HOME/.cargo/env ] && source $HOME/.cargo/env

# Overrides all system tools with ones install by brew
[ -d /opt/homebrew/bin ] && PATH="/opt/homebrew/bin:$PATH"

which direnv &> /dev/null && eval "$(direnv hook zsh)"

which jenv &> /dev/null && eval "$(jenv init -)"

which pyenv &> /dev/null && export PYENV_ROOT="$HOME/.pyenv"
which pyenv &> /dev/null && export PATH="$PYENV_ROOT/bin:$PATH"
which pyenv &> /dev/null && eval "$(pyenv init -)"

# The next line updates PATH for the Google Cloud SDK.
[ -f "$HOME/google-cloud-sdk/path.zsh.inc" ] && . "$HOME/google-cloud-sdk/path.zsh.inc"

# The next line enables shell command completion for gcloud.
which gcloud &> /dev/null && source "$(gcloud info --format='value(installation.sdk_root)')/completion.zsh.inc"

which aws_completer &> /dev/null && export PATH="${$(which aws_completer)%/*}/:$PATH"
which aws_completer &> /dev/null && autoload bashcompinit && bashcompinit
which aws_completer &> /dev/null && autoload -Uz compinit && compinit
which aws_completer &> /dev/null && complete -C "$(which aws_completer)" aws

which zoxide &> /dev/null && eval "$(zoxide init zsh)"

which hatch &> /dev/null && alias h=hatch

# pnpm (macOS)
[ -d $HOME/Library/pnpm ] && export PNPM_HOME="$HOME/Library/pnpm"
[ -d $HOME/Library/pnpm ] && export PATH="$PATH:$PNPM_HOME"

# Disable stupidly annoying homebrew auto updating when I just want to install a single package
export HOMEBREW_NO_AUTO_UPDATE=1

which jj &> /dev/null && source <(COMPLETE=zsh jj)

# Initialise Ruby version manager if found
which rbenv &> /dev/null && eval "$(rbenv init -)"

# Initialise Perl version manager if found
which plenv > /dev/null && eval "$(plenv init - zsh)"
